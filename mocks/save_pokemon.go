// Code generated by MockGen. DO NOT EDIT.
// Source: ./save_pokemon.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pokemon "github.com/redbeestudios/go-seed/internal/application/model/pokemon"
)

// MockSavePokemon is a mock of SavePokemon interface.
type MockSavePokemon struct {
	ctrl     *gomock.Controller
	recorder *MockSavePokemonMockRecorder
}

// MockSavePokemonMockRecorder is the mock recorder for MockSavePokemon.
type MockSavePokemonMockRecorder struct {
	mock *MockSavePokemon
}

// NewMockSavePokemon creates a new mock instance.
func NewMockSavePokemon(ctrl *gomock.Controller) *MockSavePokemon {
	mock := &MockSavePokemon{ctrl: ctrl}
	mock.recorder = &MockSavePokemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavePokemon) EXPECT() *MockSavePokemonMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSavePokemon) Save(ctx context.Context, pokemon *pokemon.Pokemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, pokemon)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSavePokemonMockRecorder) Save(ctx, pokemon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSavePokemon)(nil).Save), ctx, pokemon)
}
